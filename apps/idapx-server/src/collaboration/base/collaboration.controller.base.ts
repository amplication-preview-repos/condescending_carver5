/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollaborationService } from "../collaboration.service";
import { CollaborationCreateInput } from "./CollaborationCreateInput";
import { Collaboration } from "./Collaboration";
import { CollaborationFindManyArgs } from "./CollaborationFindManyArgs";
import { CollaborationWhereUniqueInput } from "./CollaborationWhereUniqueInput";
import { CollaborationUpdateInput } from "./CollaborationUpdateInput";

export class CollaborationControllerBase {
  constructor(protected readonly service: CollaborationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Collaboration })
  async createCollaboration(
    @common.Body() data: CollaborationCreateInput
  ): Promise<Collaboration> {
    return await this.service.createCollaboration({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Collaboration] })
  @ApiNestedQuery(CollaborationFindManyArgs)
  async collaborations(
    @common.Req() request: Request
  ): Promise<Collaboration[]> {
    const args = plainToClass(CollaborationFindManyArgs, request.query);
    return this.service.collaborations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Collaboration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collaboration(
    @common.Param() params: CollaborationWhereUniqueInput
  ): Promise<Collaboration | null> {
    const result = await this.service.collaboration({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Collaboration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollaboration(
    @common.Param() params: CollaborationWhereUniqueInput,
    @common.Body() data: CollaborationUpdateInput
  ): Promise<Collaboration | null> {
    try {
      return await this.service.updateCollaboration({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Collaboration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollaboration(
    @common.Param() params: CollaborationWhereUniqueInput
  ): Promise<Collaboration | null> {
    try {
      return await this.service.deleteCollaboration({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
