/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DecisionService } from "../decision.service";
import { DecisionCreateInput } from "./DecisionCreateInput";
import { Decision } from "./Decision";
import { DecisionFindManyArgs } from "./DecisionFindManyArgs";
import { DecisionWhereUniqueInput } from "./DecisionWhereUniqueInput";
import { DecisionUpdateInput } from "./DecisionUpdateInput";

export class DecisionControllerBase {
  constructor(protected readonly service: DecisionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Decision })
  async createDecision(
    @common.Body() data: DecisionCreateInput
  ): Promise<Decision> {
    return await this.service.createDecision({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Decision] })
  @ApiNestedQuery(DecisionFindManyArgs)
  async decisions(@common.Req() request: Request): Promise<Decision[]> {
    const args = plainToClass(DecisionFindManyArgs, request.query);
    return this.service.decisions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Decision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async decision(
    @common.Param() params: DecisionWhereUniqueInput
  ): Promise<Decision | null> {
    const result = await this.service.decision({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Decision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDecision(
    @common.Param() params: DecisionWhereUniqueInput,
    @common.Body() data: DecisionUpdateInput
  ): Promise<Decision | null> {
    try {
      return await this.service.updateDecision({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Decision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDecision(
    @common.Param() params: DecisionWhereUniqueInput
  ): Promise<Decision | null> {
    try {
      return await this.service.deleteDecision({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
