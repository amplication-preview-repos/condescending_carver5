/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Decision as PrismaDecision } from "@prisma/client";

export class DecisionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DecisionCountArgs, "select">): Promise<number> {
    return this.prisma.decision.count(args);
  }

  async decisions(
    args: Prisma.DecisionFindManyArgs
  ): Promise<PrismaDecision[]> {
    return this.prisma.decision.findMany(args);
  }
  async decision(
    args: Prisma.DecisionFindUniqueArgs
  ): Promise<PrismaDecision | null> {
    return this.prisma.decision.findUnique(args);
  }
  async createDecision(
    args: Prisma.DecisionCreateArgs
  ): Promise<PrismaDecision> {
    return this.prisma.decision.create(args);
  }
  async updateDecision(
    args: Prisma.DecisionUpdateArgs
  ): Promise<PrismaDecision> {
    return this.prisma.decision.update(args);
  }
  async deleteDecision(
    args: Prisma.DecisionDeleteArgs
  ): Promise<PrismaDecision> {
    return this.prisma.decision.delete(args);
  }
}
